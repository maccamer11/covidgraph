{"version":3,"sources":["components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountrySelector/CountrySelector.jsx","App.js","serviceWorker.js","index.js","images/covid.png"],"names":["Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changingUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","console","log","getCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchDaily","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountrySelect","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","covidImage","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.ef95f983.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport Countup from 'react-countup';\nimport cx from 'classnames'\n\nimport './Cards.modules.css';\n\n//data was the prop we passed, so we need to first destructure data > destructure confirmed et al\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n    if (!confirmed) {\n        return 'Loading ...'\n    }\n    return (\n        <div className='cardcontainer'>\n            <Grid container spacing={3} justify='center' className='resize'>\n                <Grid item component={Card} xs={12} md={3} className='card cases'>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Total Cases</Typography>\n                        <Typography variant='h5'>\n                            <Countup start={0} end={confirmed.value} duration={2} separator=',' />\n                        </Typography>\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Total Cases</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className='card recovered'>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\n                        <Typography variant='h5'>\n                            <Countup start={0} end={recovered.value} duration={2} separator=',' /></Typography>\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Number of recoveries</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card} xs={12} md={3} className='card deaths'>\n                    <CardContent>\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\n                        <Typography variant='h5'><Countup start={0} end={deaths.value} duration={2} separator=',' />\n                        </Typography>\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography variant='body2'>Total deaths</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changingUrl = url\n\n    if (country) {\n        changingUrl = `${url}/countries/${country}`\n    }\n    //destructuring data out of response > destructuring confirmed et al from data\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changingUrl)\n\n        return {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate\n        }\n\n    } catch (error) {\n\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n        const { data } = await axios.get(`${url}/daily`)\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n        }))\n        return modifiedData\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nexport const getCountries = async () => {\n    try {\n        const { data: { countries } } = await axios.get(`${url}/countries`)\n\n        return countries.map((country) => country.name)\n\n    } catch (error) {\n        console.log(error)\n    }\n}","import React, { useState, useEffect } from 'react'\nimport { fetchDailyData } from '../../api/index';\nimport { Line, Bar } from 'react-chartjs-2'\n\nimport './Charts.modules.css'\n\nconst Charts = ({ data: { confirmed, deaths, recovered }, country }) => {\n    const [dailyData, setDailyData] = useState([])\n\n    useEffect(() => {\n        const fetchDaily = async () => {\n            setDailyData(await fetchDailyData())\n        }\n        fetchDaily()\n\n\n    }, [])\n\n    const lineChart = (\n        dailyData.length ?\n            <Line data={{\n                labels: dailyData.map(({ date }) => date),\n                datasets: [{\n                    data: dailyData.map(({ confirmed }) => confirmed),\n                    label: 'Cases',\n                    borderColor: '#3333ff',\n                    fill: true,\n                }, {\n                    data: dailyData.map(({ deaths }) => deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                    fill: true,\n                }],\n            }} />\n            : null\n    )\n\n    console.log(confirmed, recovered, deaths)\n\n    const barChart = (\n        confirmed ?\n            (\n                <Bar\n                    data={{\n                        labels: ['Cases', 'Recoveries', 'Deaths'],\n                        datasets: [{\n                            label: 'People',\n                            backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n                            data: [confirmed.value, recovered.value, deaths.value]\n                        }]\n                    }}\n                    options={{\n                        legend: { display: false },\n                        title: { display: true, text: `Current cases in ${country}` }\n                    }} />\n            ) :\n            null\n    )\n\n    return (\n        <div className='chart'>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Charts;","import React, { useState, useEffect } from 'react'\nimport { FormControl, NativeSelect } from '@material-ui/core';\n\nimport { getCountries } from '../../api/index';\nimport './CountrySelector.modules.css'\n\nconst CountrySelect = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([])\n\n    useEffect(() => {\n        const fetchCountries = async () => {\n            setFetchedCountries(await getCountries())\n        }\n\n        fetchCountries()\n    }, [setFetchedCountries])\n\n\n\n    return (\n        <FormControl className='formcontrol'>\n            <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value='global'>Global</option>\n                {fetchedCountries.map((country, i) =>\n                    <option key={i} value={country}>{country}</option>\n                )}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountrySelect;","import React, { Component } from 'react'\nimport Cards from './components/Cards/Cards.jsx';\nimport Charts from './components/Charts/Charts.jsx';\nimport Countries from './components/CountrySelector/CountrySelector.jsx';\nimport { fetchData } from './api/index';\n\nimport covidImage from './images/covid.png'\n\nimport './App.modules.css';\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n  }\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData })\n\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    //fetched data to be passed to chart and cards\n    console.log(fetchedData)\n    this.setState({ data: fetchedData, country: country })\n  }\n\n  render() {\n    const { data, country } = this.state\n    return (\n      <>\n        <div className='container'>\n          <img className='image' src={covidImage} alt='logo' />\n          <Cards data={data} />\n          <Countries handleCountryChange={this.handleCountryChange} />\n          <Charts data={data} country={country} />\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";"],"sourceRoot":""}